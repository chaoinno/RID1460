import 'dart:convert';

import 'package:RID1460/Pages/case_detail.dart';
import 'package:RID1460/Utilities/global_resources.dart';
import 'package:RID1460/Utilities/nomal_dialog.dart';
import 'package:RID1460/models/service_case.dart';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:shared_preferences/shared_preferences.dart';

class CaseHistory extends StatefulWidget {
  @override
  _CaseHistoryState createState() => _CaseHistoryState();
}

class _CaseHistoryState extends State<CaseHistory> {
  Map<int, bool> countToValue = <int, bool>{};

  String keyword, email, sessionId;
  List<ServiceCaseList> serviceCaseList = List<ServiceCaseList>();

  @override
  void initState() {
    super.initState();
    this.readSharedPreferance();
  }

// Methods
  Future<void> getServiceCases() async {
    String url = GlobalResources().apiHost +
        'wcfrest.svc/getAllService?sessionid=${this.sessionId}';
    print(url);
    Dio dio = new Dio();
    try {
      Response response = await dio.get(url);
      // print(response);
      var result = response.data;
      ServiceCase autogenerated = ServiceCase.fromJson(result);
      // print(autogenerated.getBroadcastResult);
      Map<dynamic, dynamic> map = jsonDecode(autogenerated.getAllServiceResult);
      // print(map);
      GetAllServiceResult getBroadcastResult =
          GetAllServiceResult.fromJson(map);
      print(getBroadcastResult.list);
      if (getBroadcastResult.result == 'error') {
        normalDialog(context, 'ผิดพลาด', getBroadcastResult.msg);
      } else {
        setState(() {
          serviceCaseList.clear();
          for (var item in getBroadcastResult.list) {
            ServiceCaseList list1 = ServiceCaseList.fromJson(item);
            serviceCaseList.add(list1);
            print(list1.srid);
          }
        });
      }
    } catch (e) {
      print(e);
    }
  }

  onItemChanged(String value) {
    setState(() {
      if (value.length > 0) {
        serviceCaseList = serviceCaseList
            .where((string) =>
                string.code.contains(value) ||
                string.statusName.contains(value))
            .toList();
      } else {
        this.getServiceCases();
      }
    });
  }

  Future<void> readSharedPreferance() async {
    SharedPreferences sharedPreferences = await SharedPreferences.getInstance();

    List userInfo = sharedPreferences.getStringList('UserInfo');
    print(userInfo);
    setState(() {
      email = userInfo[0];
      sessionId = userInfo[6];
    });
    getServiceCases();
  }

  Future<void> normalDialog(
      BuildContext context, String title, String massage) async {
    showDialog(
        context: context,
        builder: (BuildContext buildContext) {
          return AlertDialog(
            title: showTitile(title, massage),
            actions: [
              okButton(context),
            ],
          );
        });
  }

// Widgets
  Widget searchKeywordForm() {
    return Container(
      margin: const EdgeInsets.all(20.0),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(10),
        color: Colors.white,
      ),
      width: MediaQuery.of(context).size.width * 0.8,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          Container(
            width: MediaQuery.of(context).size.width * 0.75,
            child: TextFormField(
              onSaved: (String string) {
                keyword = string;
              },
              decoration: InputDecoration(
                hintText: 'ค้นหา...',
              ),
              onChanged: onItemChanged,
            ),
          ),
          Container(
            height: 40,
            width: 40,
            child: Icon(
              Icons.search,
              color: Colors.grey,
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      behavior: HitTestBehavior.opaque,
      onPanDown: (_) {
        FocusScope.of(context).requestFocus(FocusNode());
      },
      onTap: () {
        FocusScopeNode currentFocus = FocusScope.of(context);

        if (!currentFocus.hasPrimaryFocus) {
          currentFocus.unfocus();
        }
      },
      child: Scaffold(
        appBar: AppBar(
          centerTitle: true,
          title: Text(
            "ประวัติการแจ้งเรื่อง",
            style: GoogleFonts.kanit(),
          ),
        ),
        body: ListTileTheme(
          selectedColor: shrineBrown900,
          child: Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage("images/bg1.png"),
                fit: BoxFit.cover,
              ),
            ),
            child: ListView(
              children: [
                Container(
                  child: searchKeywordForm(),
                ),
                for (var item in serviceCaseList)
                  InkWell(
                    onTap: () {
                      MaterialPageRoute materialPageRoute = MaterialPageRoute(
                        builder: (BuildContext context) =>
                            CaseDetail(srId: item.srid),
                      );
                      Navigator.of(context).push(materialPageRoute);
                    },
                    child: Container(
                      decoration: BoxDecoration(
                        color: Colors.white,
                        border: Border(
                          bottom: BorderSide(
                            color: Colors.grey,
                            width: 1.0,
                          ),
                        ),
                      ),
                      child: ListTile(
                        title: Row(
                          children: [
                            Text(
                              'รหัสเรื่อง : ',
                              style: GoogleFonts.kanit(),
                            ),
                            Text(
                              item.code ?? '-',
                              style: GoogleFonts.kanit(
                                textStyle: TextStyle(
                                  color: Colors.orange,
                                ),
                              ),
                            ),
                          ],
                        ),
                        isThreeLine: true,
                        subtitle: Text(
                          'วันที่แจ้งเรื่อง : ${item.openDate}\nสถานะ : ${item.statusName}',
                          style: GoogleFonts.kanit(),
                        ),
                        // leading: Column(
                        //   children: [
                        //     Text('รหัสเรื่อง'),
                        //     Icon(Icons.label),
                        //   ],
                        // ),
                        selected: false,
                        trailing: Container(
                          padding: const EdgeInsets.only(top: 15.0),
                          child: Icon(Icons.arrow_forward_ios),
                        ),
                        // trailing: Checkbox(
                        //   value: countToValue[count] ?? false,
                        //   onChanged: (bool value) {
                        //     setState(() {
                        //       countToValue[count] = value;
                        //     });
                        //   },
                        //   activeColor: shrineBrown900,
                        // ),
                      ),
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

ThemeData _buildShrineTheme() {
  final ThemeData base = ThemeData.light();
  return base.copyWith(
    colorScheme: _shrineColorScheme,
    accentColor: shrineBrown900,
    primaryColor: shrinePink100,
    buttonColor: shrinePink100,
    scaffoldBackgroundColor: shrineBackgroundWhite,
    cardColor: shrineBackgroundWhite,
    textSelectionColor: shrinePink100,
    errorColor: shrineErrorRed,
    buttonTheme: const ButtonThemeData(
      colorScheme: _shrineColorScheme,
      textTheme: ButtonTextTheme.normal,
    ),
    primaryIconTheme: _customIconTheme(base.iconTheme),
    textTheme: _buildShrineTextTheme(base.textTheme),
    primaryTextTheme: _buildShrineTextTheme(base.primaryTextTheme),
    accentTextTheme: _buildShrineTextTheme(base.accentTextTheme),
    iconTheme: _customIconTheme(base.iconTheme),
  );
}

IconThemeData _customIconTheme(IconThemeData original) {
  return original.copyWith(color: shrineBrown900);
}

TextTheme _buildShrineTextTheme(TextTheme base) {
  return base
      .copyWith(
        caption: base.caption.copyWith(
          fontWeight: FontWeight.w400,
          fontSize: 14,
          letterSpacing: defaultLetterSpacing,
        ),
        button: base.button.copyWith(
          fontWeight: FontWeight.w500,
          fontSize: 14,
          letterSpacing: defaultLetterSpacing,
        ),
      )
      .apply(
        fontFamily: 'Rubik',
        displayColor: shrineBrown900,
        bodyColor: shrineBrown900,
      );
}

const ColorScheme _shrineColorScheme = ColorScheme(
  primary: shrinePink100,
  primaryVariant: shrineBrown900,
  secondary: shrinePink50,
  secondaryVariant: shrineBrown900,
  surface: shrineSurfaceWhite,
  background: shrineBackgroundWhite,
  error: shrineErrorRed,
  onPrimary: shrineBrown900,
  onSecondary: shrineBrown900,
  onSurface: shrineBrown900,
  onBackground: shrineBrown900,
  onError: shrineSurfaceWhite,
  brightness: Brightness.light,
);

const Color shrinePink50 = Color(0xFFFEEAE6);
const Color shrinePink100 = Color(0xFFFEDBD0);
const Color shrinePink300 = Color(0xFFFBB8AC);
const Color shrinePink400 = Color(0xFFEAA4A4);

const Color shrineBrown900 = Color(0xFF442B2D);
const Color shrineBrown600 = Color(0xFF7D4F52);

const Color shrineErrorRed = Color(0xFFC5032B);

const Color shrineSurfaceWhite = Color(0xFFFFFBFA);
const Color shrineBackgroundWhite = Colors.white;

const defaultLetterSpacing = 0.03;
